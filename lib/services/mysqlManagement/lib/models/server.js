/*
 * Copyright (c) Microsoft and contributors.  All rights reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the Server class.
 * @constructor
 * Represents a MySQL server.
 *
 * @member {object} [sku] Represents the sku of the MySQL server.
 * 
 * @member {string} [sku.name] The name of the sku, typically, a letter +
 * Number code, e.g. P3.
 * 
 * @member {string} [sku.tier] The tier of the particular SKU, e.g. Basic.
 * Possible values include: 'Basic'
 * 
 * @member {number} [sku.capacity] The scale up/out capacity, representing
 * server's DTU allocation.
 * 
 * @member {string} [sku.size] The size code, to be interpreted by resource as
 * appropriate.
 * 
 * @member {string} [sku.family] The family of hardware.
 * 
 * @member {number} [storageMB] The maximum storage allowed for a MySQL server.
 * 
 * @member {string} [userVisibleState] A value representing state of a MySQL
 * server that is visible to user.
 * 
 * @member {string} [fullyQualifiedDomainName] The fully qualified domain name
 * of a MySQL server.
 * 
 * @member {string} administratorLogin The administrator's login name of a
 * MySQL server. Can only be specified when the server is being created (and
 * is required for creation).
 * 
 * @member {string} administratorLoginPassword The password of the
 * administrator login.
 * 
 * @member {string} [version] The version of a MySQL server. Possible values
 * include: '5.6'
 * 
 */
function Server() {
  Server['super_'].call(this);
}

util.inherits(Server, models['Resource']);

/**
 * Defines the metadata of Server
 *
 * @returns {object} metadata of Server
 *
 */
Server.prototype.mapper = function () {
  return {
    required: false,
    serializedName: 'Server',
    type: {
      name: 'Composite',
      className: 'Server',
      modelProperties: {
        id: {
          required: false,
          readOnly: true,
          serializedName: 'id',
          type: {
            name: 'String'
          }
        },
        name: {
          required: false,
          readOnly: true,
          serializedName: 'name',
          type: {
            name: 'String'
          }
        },
        type: {
          required: false,
          readOnly: true,
          serializedName: 'type',
          type: {
            name: 'String'
          }
        },
        location: {
          required: true,
          serializedName: 'location',
          type: {
            name: 'String'
          }
        },
        tags: {
          required: false,
          serializedName: 'tags',
          type: {
            name: 'Dictionary',
            value: {
                required: false,
                serializedName: 'StringElementType',
                type: {
                  name: 'String'
                }
            }
          }
        },
        sku: {
          required: false,
          serializedName: 'sku',
          type: {
            name: 'Composite',
            className: 'Sku'
          }
        },
        storageMB: {
          required: false,
          serializedName: 'properties.storageMB',
          constraints: {
            InclusiveMinimum: 1024
          },
          type: {
            name: 'Number'
          }
        },
        userVisibleState: {
          required: false,
          readOnly: true,
          serializedName: 'properties.userVisibleState',
          type: {
            name: 'String'
          }
        },
        fullyQualifiedDomainName: {
          required: false,
          readOnly: true,
          serializedName: 'properties.fullyQualifiedDomainName',
          type: {
            name: 'String'
          }
        },
        administratorLogin: {
          required: true,
          serializedName: 'properties.administratorLogin',
          type: {
            name: 'String'
          }
        },
        administratorLoginPassword: {
          required: true,
          serializedName: 'properties.administratorLoginPassword',
          type: {
            name: 'String'
          }
        },
        version: {
          required: false,
          serializedName: 'properties.version',
          type: {
            name: 'String'
          }
        }
      }
    }
  };
};

module.exports = Server;
